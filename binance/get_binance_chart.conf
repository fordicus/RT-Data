# get_binance_chart.conf

# Accessed by:
#	stream_binance.py
#	get_binance_chart.py

#——————————————————————————————————————————————————————————————————
# 💱 Comma-separated list of Binance spot symbols (UPPERCASE)
#——————————————————————————————————————————————————————————————————

SYMBOLS = ETHUSDT #,BTCUSDT,SOLUSDT,ETHUSDC,BTCUSDC,XRPUSDT,PEPEUSDT,DOGEUSDT,SUIUSDT,AAVEUSDT

#——————————————————————————————————————————————————————————————————
# 📦 Order book save directory (used in stream_binance.py)
#——————————————————————————————————————————————————————————————————

LOB_DIR	  = ./data/binance/orderbook/
CHART_DIR = ./data/binance/execution/

#——————————————————————————————————————————————————————————————————
# One-minute-basis temporary .zip files are merged per day.
# The temporary files are deleted if `PURGE_ON_DATE_CHANGE` == 1.
#——————————————————————————————————————————————————————————————————

PURGE_ON_DATE_CHANGE = 1

#——————————————————————————————————————————————————————————————————
# 🔁 Reconnection Strategy Settings (used in stream_binance.py)
#——————————————————————————————————————————————————————————————————
# Summary of formula-based backoff logic:
# 
#   backoff = min(MAX_BACKOFF, BASE_BACKOFF ** n) + jitter
#   if n > RESET_CYCLE_AFTER:
#	   n = RESET_BACKOFF_LEVEL
#
# Example progression (without jitter):
#   2^1 = 2s
#   2^2 = 4s
#   2^3 = 8s
#   ...
#   2^7 = 128s → exceeds MAX_BACKOFF → clamp to 30s
#   next cycle resumes at 2^3 = 8s
#——————————————————————————————————————————————————————————————————

BASE_BACKOFF		= 2
MAX_BACKOFF			= 30
RESET_CYCLE_AFTER	= 7
RESET_BACKOFF_LEVEL = 3

#——————————————————————————————————————————————————————————————————  
# 📊 Dashboard WebSocket Monitoring Configuration  
#——————————————————————————————————————————————————————————————————  
# Controls real-time dashboard monitoring via WebSocket:
#
#   •	DASHBOARD_STREAM_INTERVAL (float):
#
#		Interval (seconds) between dashboard updates  
#		(lower = higher refresh rate, higher CPU/network usage).  
#
#   •	MAX_DASHBOARD_CONNECTIONS (int):
#
#		Maximum number of concurrent WebSocket clients  
#		allowed to connect to the `/ws/dashboard` endpoint.  
#
#   •	MAX_DASHBOARD_SESSION_SEC (int):
#
#		Maximum session duration (seconds) per client  
#		before the connection is gracefully closed.  
#		If set to 0, the session duration is unlimited,  
#		allowing clients to stay connected indefinitely.  
#		No timeout will be enforced, and connections will  
#		only close due to errors or manual disconnection.
#
#   •	HARDWARE_MONITORING_INTERVAL (float):
#
#		Interval (seconds) for hardware metrics updates  
#		(e.g., CPU, memory, storage, and network usage).  
#
#   •	CPU_PERCENT_DURATION (float):
#
#		Duration (seconds) for CPU usage sampling.  
#  
# These settings are used exclusively by `stream_binance.py`
# to manage real-time latency and hardware metrics streaming.  
#——————————————————————————————————————————————————————————————————

DASHBOARD_STREAM_INTERVAL	 = 0.03333
MAX_DASHBOARD_CONNECTIONS	 = 1
MAX_DASHBOARD_SESSION_SEC	 = 0
HARDWARE_MONITORING_INTERVAL = 1.0
CPU_PERCENT_DURATION		 = 0.2
DESIRED_MAX_SYS_MEM_LOAD	 = 90.0

#——————————————————————————————————————————————————————————————————
# ⚙️ Latency Monitoring Configuration
#——————————————————————————————————————————————————————————————————
# LATENCY_DEQUE_SIZE: latency_dict[symbol] maxlen
# LATENCY_SAMPLE_MIN: min. samples before readiness
# LATENCY_THRESHOLD_MS: max med. latency [ms] for stream to be 'OK'
# LATENCY_SIGNAL_SLEEP: sec. to sleep between latency signal checks
# LATENCY_GATE_SLEEP: sec. to sleep in asyncio tasks
#——————————————————————————————————————————————————————————————————

LATENCY_DEQUE_SIZE	 = 10
LATENCY_SAMPLE_MIN	 = 10
LATENCY_THRESHOLD_MS = 500
LATENCY_SIGNAL_SLEEP = 0.2
LATENCY_GATE_SLEEP	 = 1.0		# TODO: Do we really need this one?

#——————————————————————————————————————————————————————————————————
# 🔄 WebSocket Ping/Pong Timing (from .conf): controls client ping
# interval and pong timeout for Binance streams. Setting to `None`
# disables client pings (Binance pings the client by default).
# Reference: `WebSocket Streams for Binance (2025-01-28)` in
# 	https://tinyurl.com/BinanceWsMan
#——————————————————————————————————————————————————————————————————

WS_PING_INTERVAL = 0
WS_PING_TIMEOUT  = 0

#——————————————————————————————————————————————————————————————————
# Used by stream_binance.py and/or get_binance_chart.py
#
# ⏱️ TIMEOUT:
#	- Used only in get_binance_chart.py.
#	- Maximum allowed time (seconds) for each curl request.
#
# ⚙️ MAX_WORKERS:
#	- Used in get_binance_chart.py as ThreadPoolExecutor
#	  worker count (download).
#	- Used in stream_binance.py as ProcessPoolExecutor
#	  worker count (daily merge).
#	- Controls parallelism in both scripts.
#——————————————————————————————————————————————————————————————————

TIMEOUT		= 100
MAX_WORKERS = 8

#——————————————————————————————————————————————————————————————————